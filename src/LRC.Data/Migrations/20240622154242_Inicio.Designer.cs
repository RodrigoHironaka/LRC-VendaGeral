// <auto-generated />
using System;
using LRC.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LRC.Data.Migrations
{
    [DbContext(typeof(MeuDbContext))]
    [Migration("20240622154242_Inicio")]
    partial class Inicio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LRC.Business.Entidades.Caixa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<long>("Numero")
                        .HasColumnType("bigint");

                    b.Property<int>("Situacao")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ValorInicial")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Caixas");
                });

            modelBuilder.Entity("LRC.Business.Entidades.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Celular2")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<long>("Documento")
                        .HasColumnType("bigint");

                    b.Property<string>("Documento2")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Nascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Responsaveis")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Situacao")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TipoPessoa")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("LRC.Business.Entidades.Colaborador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Admissao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Celular")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Celular2")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Demissao")
                        .HasColumnType("datetime2");

                    b.Property<long>("Documento")
                        .HasColumnType("bigint");

                    b.Property<string>("Documento2")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Nascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Situacao")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TipoPessoa")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Colaboradores");
                });

            modelBuilder.Entity("LRC.Business.Entidades.ContaPagar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEmissao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NumeroDocumento")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observacao")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Situacao")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("FornecedorId");

                    b.ToTable("ContasPagar");
                });

            modelBuilder.Entity("LRC.Business.Entidades.ContaReceber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEmissao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumeroDocumento")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observacao")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Situacao")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("ContasReceber");
                });

            modelBuilder.Entity("LRC.Business.Entidades.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ColaboradorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntregadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FornecedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<int>("Situacao")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ColaboradorId");

                    b.HasIndex("EntregadorId");

                    b.HasIndex("FornecedorId");

                    b.ToTable("Enderecos", (string)null);
                });

            modelBuilder.Entity("LRC.Business.Entidades.Entregador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Celular")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Celular2")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<long>("Documento")
                        .HasColumnType("bigint");

                    b.Property<string>("Documento2")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Nascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Situacao")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TipoPessoa")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Entregadores");
                });

            modelBuilder.Entity("LRC.Business.Entidades.FluxoCaixa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaixaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<int>("DebitoCredito")
                        .HasColumnType("int");

                    b.Property<Guid>("FormaPagamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CaixaId");

                    b.HasIndex("FormaPagamentoId");

                    b.ToTable("FluxosCaixa");
                });

            modelBuilder.Entity("LRC.Business.Entidades.FormaPagamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PeridoParcelamento")
                        .HasColumnType("int");

                    b.Property<int>("QtdParcelamento")
                        .HasColumnType("int");

                    b.Property<int>("Situacao")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FormasPagamento");
                });

            modelBuilder.Entity("LRC.Business.Entidades.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Celular")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Celular2")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<long>("Documento")
                        .HasColumnType("bigint");

                    b.Property<string>("Documento2")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Nascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Situacao")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TipoPessoa")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("LRC.Business.Entidades.Grupo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Situacao")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Grupos", (string)null);
                });

            modelBuilder.Entity("LRC.Business.Entidades.LogAlteracao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Chave")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Historico")
                        .IsRequired()
                        .HasColumnType("varchar(8000)");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("LogsAlteracao", (string)null);
                });

            modelBuilder.Entity("LRC.Business.Entidades.Parcela", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContaPagarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContaReceberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataVencimento")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DescontoPorcentual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DescontoValor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("FormaPagamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("JurosPorcentual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("JurosValor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Numero")
                        .HasColumnType("bigint");

                    b.Property<string>("Observacao")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ParcelaDe")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SituacaoParcela")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ValorAberto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorPago")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorParcela")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorReajustado")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContaPagarId");

                    b.HasIndex("ContaReceberId");

                    b.HasIndex("FormaPagamentoId");

                    b.ToTable("Parcelas");
                });

            modelBuilder.Entity("LRC.Business.Entidades.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("Quantidade")
                        .HasColumnType("int");

                    b.Property<int?>("Situacao")
                        .HasColumnType("int");

                    b.Property<Guid>("SubgrupoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasPrecision(10, 2)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("SubgrupoId");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("LRC.Business.Entidades.Subgrupo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GrupoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("Situacao")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GrupoId");

                    b.ToTable("SubGrupos", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LRC.Business.Entidades.ContaPagar", b =>
                {
                    b.HasOne("LRC.Business.Entidades.Cliente", "Cliente")
                        .WithOne("ContaPagar")
                        .HasForeignKey("LRC.Business.Entidades.ContaPagar", "ClienteId")
                        .IsRequired();

                    b.HasOne("LRC.Business.Entidades.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("LRC.Business.Entidades.ContaReceber", b =>
                {
                    b.HasOne("LRC.Business.Entidades.Cliente", "Cliente")
                        .WithOne("ContaReceber")
                        .HasForeignKey("LRC.Business.Entidades.ContaReceber", "ClienteId")
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("LRC.Business.Entidades.Endereco", b =>
                {
                    b.HasOne("LRC.Business.Entidades.Cliente", "Cliente")
                        .WithMany("Enderecos")
                        .HasForeignKey("ClienteId")
                        .IsRequired();

                    b.HasOne("LRC.Business.Entidades.Colaborador", "Colaborador")
                        .WithMany("Enderecos")
                        .HasForeignKey("ColaboradorId")
                        .IsRequired();

                    b.HasOne("LRC.Business.Entidades.Entregador", "Entregador")
                        .WithMany("Enderecos")
                        .HasForeignKey("EntregadorId")
                        .IsRequired();

                    b.HasOne("LRC.Business.Entidades.Fornecedor", null)
                        .WithMany("Enderecos")
                        .HasForeignKey("FornecedorId");

                    b.Navigation("Cliente");

                    b.Navigation("Colaborador");

                    b.Navigation("Entregador");
                });

            modelBuilder.Entity("LRC.Business.Entidades.FluxoCaixa", b =>
                {
                    b.HasOne("LRC.Business.Entidades.Caixa", "Caixa")
                        .WithMany("FluxosCaixa")
                        .HasForeignKey("CaixaId")
                        .IsRequired();

                    b.HasOne("LRC.Business.Entidades.FormaPagamento", "FormaPagamento")
                        .WithOne("FluxoCaixa")
                        .HasForeignKey("LRC.Business.Entidades.FluxoCaixa", "FormaPagamentoId")
                        .IsRequired();

                    b.Navigation("Caixa");

                    b.Navigation("FormaPagamento");
                });

            modelBuilder.Entity("LRC.Business.Entidades.Parcela", b =>
                {
                    b.HasOne("LRC.Business.Entidades.ContaPagar", "ContaPagar")
                        .WithMany("Parcelas")
                        .HasForeignKey("ContaPagarId")
                        .IsRequired();

                    b.HasOne("LRC.Business.Entidades.ContaReceber", "ContaReceber")
                        .WithMany("Parcelas")
                        .HasForeignKey("ContaReceberId")
                        .IsRequired();

                    b.HasOne("LRC.Business.Entidades.FormaPagamento", "FormaPagamento")
                        .WithOne("Parcela")
                        .HasForeignKey("LRC.Business.Entidades.Parcela", "FormaPagamentoId")
                        .IsRequired();

                    b.Navigation("ContaPagar");

                    b.Navigation("ContaReceber");

                    b.Navigation("FormaPagamento");
                });

            modelBuilder.Entity("LRC.Business.Entidades.Produto", b =>
                {
                    b.HasOne("LRC.Business.Entidades.Subgrupo", "Subgrupo")
                        .WithOne("Produto")
                        .HasForeignKey("LRC.Business.Entidades.Produto", "SubgrupoId")
                        .IsRequired();

                    b.Navigation("Subgrupo");
                });

            modelBuilder.Entity("LRC.Business.Entidades.Subgrupo", b =>
                {
                    b.HasOne("LRC.Business.Entidades.Grupo", "Grupo")
                        .WithOne("Subgrupo")
                        .HasForeignKey("LRC.Business.Entidades.Subgrupo", "GrupoId")
                        .IsRequired();

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LRC.Business.Entidades.Caixa", b =>
                {
                    b.Navigation("FluxosCaixa");
                });

            modelBuilder.Entity("LRC.Business.Entidades.Cliente", b =>
                {
                    b.Navigation("ContaPagar");

                    b.Navigation("ContaReceber");

                    b.Navigation("Enderecos");
                });

            modelBuilder.Entity("LRC.Business.Entidades.Colaborador", b =>
                {
                    b.Navigation("Enderecos");
                });

            modelBuilder.Entity("LRC.Business.Entidades.ContaPagar", b =>
                {
                    b.Navigation("Parcelas");
                });

            modelBuilder.Entity("LRC.Business.Entidades.ContaReceber", b =>
                {
                    b.Navigation("Parcelas");
                });

            modelBuilder.Entity("LRC.Business.Entidades.Entregador", b =>
                {
                    b.Navigation("Enderecos");
                });

            modelBuilder.Entity("LRC.Business.Entidades.FormaPagamento", b =>
                {
                    b.Navigation("FluxoCaixa");

                    b.Navigation("Parcela");
                });

            modelBuilder.Entity("LRC.Business.Entidades.Fornecedor", b =>
                {
                    b.Navigation("Enderecos");
                });

            modelBuilder.Entity("LRC.Business.Entidades.Grupo", b =>
                {
                    b.Navigation("Subgrupo");
                });

            modelBuilder.Entity("LRC.Business.Entidades.Subgrupo", b =>
                {
                    b.Navigation("Produto");
                });
#pragma warning restore 612, 618
        }
    }
}
